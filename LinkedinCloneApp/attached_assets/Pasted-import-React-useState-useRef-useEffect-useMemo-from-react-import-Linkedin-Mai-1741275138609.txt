import React, { useState, useRef, useEffect, useMemo } from 'react';
import { 
  Linkedin, 
  Mail, 
  Phone, 
  Rocket,
  Satellite,
  Telescope,
  Globe,
  Target,
  Clock,
  Award,
  BookOpen,
  Briefcase,
  GitBranch,
  Code,
  Zap,
  Download
} from 'lucide-react';
import * as THREE from 'three';
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';
import { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';
import { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';
import { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass';

const UltimateSpacePortfolio = () => {
  const [activeSection, setActiveSection] = useState('mission-control');
  const [isDarkMode, setIsDarkMode] = useState(true);
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const threeContainerRef = useRef(null);
  const sceneRef = useRef(null);
  const rendererRef = useRef(null);
  const composerRef = useRef(null);

  // Advanced 3D Space Background
  useEffect(() => {
    if (!threeContainerRef.current) return;

    // Scene setup
    const scene = new THREE.Scene();
    sceneRef.current = scene;

    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
    camera.position.z = 5;

    const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
    renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.setPixelRatio(window.devicePixelRatio);
    threeContainerRef.current.appendChild(renderer.domElement);
    rendererRef.current = renderer;

    // Orbit controls
    const controls = new OrbitControls(camera, renderer.domElement);
    controls.enableDamping = true;
    controls.dampingFactor = 0.05;

    // Post-processing effects
    const composer = new EffectComposer(renderer);
    const renderPass = new RenderPass(scene, camera);
    composer.addPass(renderPass);

    const bloomPass = new UnrealBloomPass(
      new THREE.Vector2(window.innerWidth, window.innerHeight),
      1.5,  // strength
      0.4,  // radius
      0.85  // threshold
    );
    composer.addPass(bloomPass);
    composerRef.current = composer;

    // Starfield
    const starsGeometry = new THREE.BufferGeometry();
    const starsCount = 10000;
    const posArray = new Float32Array(starsCount * 3);

    for (let i = 0; i < starsCount * 3; i++) {
      posArray[i] = (Math.random() - 0.5) * 100;
    }

    starsGeometry.setAttribute('position', new THREE.BufferAttribute(posArray, 3));
    const starsMaterial = new THREE.PointsMaterial({ 
      color: 0xffffff, 
      size: 0.005,
      transparent: true,
      opacity: 0.8
    });
    const starField = new THREE.Points(starsGeometry, starsMaterial);
    scene.add(starField);

    // Animated planets/satellites
    const planets = [];
    const planetColors = [0x3B82F6, 0x8B5CF6, 0x10B981, 0xF43F5E];
    
    for (let i = 0; i < 5; i++) {
      const geometry = new THREE.SphereGeometry(Math.random() * 0.5 + 0.2, 32, 32);
      const material = new THREE.MeshStandardMaterial({ 
        color: planetColors[Math.floor(Math.random() * planetColors.length)],
        emissive: 0x111122,
        emissiveIntensity: 0.2
      });
      const planet = new THREE.Mesh(geometry, material);
      
      planet.position.set(
        (Math.random() - 0.5) * 20,
        (Math.random() - 0.5) * 20,
        (Math.random() - 0.5) * 20
      );
      
      scene.add(planet);
      planets.push(planet);
    }

    // Lighting
    const ambientLight = new THREE.AmbientLight(0x404040);
    scene.add(ambientLight);

    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.5);
    directionalLight.position.set(5, 5, 5);
    scene.add(directionalLight);

    // Animation loop
    const animate = () => {
      requestAnimationFrame(animate);

      // Rotate planets
      planets.forEach((planet, index) => {
        planet.rotation.x += 0.005 * (index + 1);
        planet.rotation.y += 0.003 * (index + 1);
      });

      // Rotate starfield slowly
      starField.rotation.y += 0.0005;

      controls.update();
      composerRef.current.render();
    };

    animate();

    // Resize handler
    const handleResize = () => {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);
      composerRef.current.setSize(window.innerWidth, window.innerHeight);
    };

    window.addEventListener('resize', handleResize);

    // Cleanup
    return () => {
      window.removeEventListener('resize', handleResize);
      threeContainerRef.current?.removeChild(renderer.domElement);
    };
  }, []);

  // Skill Categories with Advanced Visualization
  const skillCategories = [
    {
      name: 'Frontend',
      skills: [
        { name: 'React', level: 95, color: '#61DAFB' },
        { name: 'Next.js', level: 90, color: '#000000' },
        { name: 'Tailwind CSS', level: 85, color: '#38BDF8' }
      ]
    },
    {
      name: 'Backend',
      skills: [
        { name: 'Node.js', level: 88, color: '#339933' },
        { name: 'Python', level: 82, color: '#3776AB' },
        { name: 'PostgreSQL', level: 75, color: '#336791' }
      ]
    },
    {
      name: 'DevOps',
      skills: [
        { name: 'Docker', level: 80, color: '#2496ED' },
        { name: 'AWS', level: 70, color: '#FF9900' },
        { name: 'CI/CD', level: 85, color: '#4CAF50' }
      ]
    }
  ];

  // Professional Missions with Enhanced Details
  const professionalMissions = [
    {
      title: 'E-Commerce Logistics Optimization',
      company: 'Canadian Tire Corporation',
      impact: '10% Efficiency Gain',
      technologies: ['MLOps', 'Cloud Architecture', 'Product Analytics'],
      description: 'Engineered a data-driven logistics platform leveraging predictive modeling and advanced A/B testing frameworks.',
      keyAchievements: [
        'Reduced operational costs through intelligent routing',
        'Implemented machine learning predictive maintenance',
        'Enhanced real-time inventory tracking'
      ]
    },
    {
      title: 'User Experience Revolution',
      company: 'Joe Johnson Equipment',
      impact: '15% User Engagement',
      technologies: ['Data Science', 'UX Design', 'Product Strategy'],
      description: 'Transformed product features through comprehensive data analytics and innovative user research methodologies.',
      keyAchievements: [
        'Developed intuitive user interfaces',
        'Implemented personalization algorithms',
        'Created data-driven product roadmap'
      ]
    }
  ];

  // Mission Control Section Renderer
  const renderMissionControl = () => (
    <div className="grid md:grid-cols-3 gap-6 p-8">
      {skillCategories.map((category, catIndex) => (
        <div 
          key={catIndex} 
          className="bg-white/5 backdrop-blur-md rounded-xl p-6 border border-white/10 
                     transform transition-all hover:scale-105 hover:border-blue-500 
                     hover:shadow-[0_0_30px_rgba(59,130,246,0.3)]"
        >
          <h3 className="text-2xl font-bold mb-4 text-blue-300">{category.name}</h3>
          {category.skills.map((skill, skillIndex) => (
            <div key={skillIndex} className="mb-3">
              <div className="flex justify-between text-sm mb-1">
                <span className="text-gray-300">{skill.name}</span>
                <span className="text-gray-400">{skill.level}%</span>
              </div>
              <div className="w-full bg-gray-700 rounded-full h-2.5">
                <div 
                  className="h-2.5 rounded-full" 
                  style={{ 
                    width: `${skill.level}%`, 
                    backgroundColor: skill.color 
                  }}
                ></div>
              </div>
            </div>
          ))}
        </div>
      ))}
    </div>
  );

  // Missions Section Renderer
  const renderMissions = () => (
    <div className="space-y-6 p-8">
      {professionalMissions.map((mission, index) => (
        <div 
          key={index} 
          className="bg-white/5 backdrop-blur-md rounded-xl p-6 border border-white/10 
                     transform transition-all hover:scale-[1.02] hover:border-blue-500 
                     hover:shadow-[0_0_30px_rgba(59,130,246,0.3)]"
        >
          <div className="flex justify-between items-center mb-4">
            <h3 className="text-2xl font-semibold text-blue-300">{mission.title}</h3>
            <span className="bg-purple-600 text-white px-3 py-1 rounded-full text-sm">
              {mission.impact}
            </span>
          </div>
          <p className="text-gray-300 mb-4">{mission.description}</p>
          <div className="mb-4">
            <h4 className="text-lg font-semibold text-blue-400 mb-2">Key Achievements</h4>
            <ul className="list-disc list-inside text-gray-400 space-y-1">
              {mission.keyAchievements.map((achievement, achIndex) => (
                <li key={achIndex}>{achievement}</li>
              ))}
            </ul>
          </div>
          <div className="flex flex-wrap gap-2">
            {mission.technologies.map((tech, techIndex) => (
              <span 
                key={techIndex} 
                className="px-3 py-1 bg-blue-900/50 text-blue-300 rounded-full text-xs"
              >
                {tech}
              </span>
            ))}
          </div>
        </div>
      ))}
    </div>
  );

  // Downloadable Resume Component
  const ResumeDownload = () => (
    <button 
      className="fixed bottom-4 right-4 bg-blue-600 text-white p-3 rounded-full 
                 shadow-lg hover:bg-blue-700 transition-all group"
      onClick={() => {
        // Future implementation: Add actual resume download logic
        alert('Resume download will be implemented soon!');
      }}
    >
      <Download className="group-hover:rotate-12 transition-transform" />
    </button>
  );

  return (
    <div className={`relative min-h-screen overflow-hidden ${isDarkMode ? 'dark' : ''}`}>
      {/* 3D Background Container */}
      <div 
        ref={threeContainerRef} 
        className="fixed inset-0 z-0 w-full h-full" 
        style={{ pointerEvents: 'none' }}
      />

      {/* Mobile Menu Toggle */}
      <button 
        className="fixed top-4 right-4 z-50 md:hidden bg-blue-600/30 backdrop-blur-md 
                   p-2 rounded-full text-white"
        onClick={() => setIsMenuOpen(!isMenuOpen)}
      >
        {isMenuOpen ? 'Close' : 'Menu'}
      </button>

      {/* Main Content */}
      <div className="relative z-10 text-white">
        {/* Header */}
        <header className="fixed top-0 left-0 right-0 z-40 
                           bg-black/40 backdrop-blur-md shadow-lg">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div className="flex justify-between items-center py-4">
              {/* Logo & Name */}
              <div className="flex items-center space-x-4">
                <Rocket className="text-blue-400" size={40} />
                <h1 className="text-2xl sm:text-3xl font-bold bg-clip-text 
                               text-transparent bg-gradient-to-r from-blue-400 to-purple-600">
                  Yash Kansagara
                </h1>
              </div>

              {/* Dark Mode Toggle */}
              <div className="flex items-center space-x-4">
                <button 
                  onClick={() => setIsDarkMode(!isDarkMode)}
                  className="bg-white/10 hover:bg-white/20 p-2 rounded-full"
                >
                  {isDarkMode ? '☀️' : '🌙'}
                </button>
              </div>
            </div>

            {/* Navigation */}
            <nav className={`
              ${isMenuOpen ? 'block' : 'hidden'} 
              md:block absolute md:relative top-full left-0 right-0 
              bg-black/40 md:bg-transparent backdrop-blur-md md:backdrop-blur-none
            `}>
              <div className="flex flex-col md:flex-row justify-center space-y-2 md:space-y-0 md:space-x-6 py-4 md:py-0">
                {[
                  { name: 'mission-control', icon: Globe, label: 'Mission Control' },
                  { name: 'missions', icon: Target, label: 'Professional Missions' },
                  { name: 'contact', icon: Satellite, label: 'Contact' }
                ].map((item) => (
                  <button
                    key={item.name}
                    onClick={() => {
                      setActiveSection(item.name);
                      setIsMenuOpen(false);
                    }}
                    className={`
                      flex items-center space-x-2 px-